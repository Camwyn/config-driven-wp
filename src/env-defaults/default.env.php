<?php

return array(
	'DB_HOST' => '127.0.0.1',

	/** Database Charset to use in creating database tables. */
	'DB_CHARSET' => 'utf8',

	/** The Database Collate type. Don't change this if in doubt. */
	'DB_COLLATE' => '',

	'WP_CACHE_KEY_SALT' => '__WP_CACHE_KEY_SALT__',

	'memcached_servers' => array(
		'127.0.0.1:11211',
	),

	'batcache' => array(
		// Expire batcache items aged this many seconds (zero to disable batcache)
		'max_age' => 300,
		// Send stale-if-error Cache-Control directive for Squid
		'stale_if_error' => 3600,
		// Zero disables sending buffers to remote datacenters (req/sec is never sent)
		'remote' => 0,
		// Only batcache a page after it is accessed this many times... (two or more)
		'times' => 2,
		// ...in this many seconds (zero to ignore this and use batcache immediately)
		'seconds' => 120,
		// Name of memcached group. You can simulate a cache flush by changing this.
		'group' => 'batcache',
		// Add headers here. These will be sent with every response from the cache.
		'headers' => array(),
		// Set true to enable redirect caching.
		'cache_redirects' => false,
		// This is set to the response code during a redirect.
		'redirect_status' => false,
		// This is set to the redirect location.
		'redirect_location' => false,
		// These headers will never be cached. Apply strtolower.
		'uncached_headers' => array( 'transfer-encoding' ),
		// Set false to hide the batcache info <!-- comment -->
		'debug' => true,
		// Set false to disable Last-Modified and Cache-Control headers
		'cache_control' => true,
		// Change this to cancel the output buffer. Use batcache_cancel();
		'cancel' => false,
		// If you conditionally serve different content, put the variable values here.
		'unique' => call_user_func( function () {
			$unique = array();
			$basic_auth = array();
			if ( ! empty( $_SERVER['PHP_AUTH_USER'] ) ) {
				$basic_auth[] = $_SERVER['PHP_AUTH_USER'];
			}
			if ( ! empty( $_SERVER['PHP_AUTH_PW'] ) ) {
				$basic_auth[] = $_SERVER['PHP_AUTH_PW'];
			}
			if ( ! empty( $basic_auth ) ) {
				$unique['basic_auth'] = md5( join( ':', $basic_auth ) );
			}
			return $unique;
		} ),
		'status_header' => false, // eliminates PHP Notice generated by Batcache about this property not being defined
		'query' => array(), // supplied with the query string vars, but if we don't supply it here there will be a PHP notice about an undefined object property
	),

	/**#@+
	 * Authentication Unique Keys and Salts.
	 *
	 * Change these to different unique phrases!
	 * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}
	 * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.
	 *
	 * @since 2.6.0
	 */
	'AUTH_KEY'         => '__AUTH_KEY__',
	'SECURE_AUTH_KEY'  => '__SECURE_AUTH_KEY__',
	'LOGGED_IN_KEY'    => '__LOGGED_IN_KEY__',
	'NONCE_KEY'        => '__NONCE_KEY__',
	'AUTH_SALT'        => '__AUTH_SALT__',
	'SECURE_AUTH_SALT' => '__SECURE_AUTH_SALT__',
	'LOGGED_IN_SALT'   => '__LOGGED_IN_SALT__',
	'NONCE_SALT'       => '__NONCE_SALT__',

	/**
	 * WordPress Localized Language, defaults to English.
	 *
	 * Change this to localize WordPress.  A corresponding MO file for the chosen
	 * language must be installed to wp-content/languages. For example, install
	 * de.mo to wp-content/languages and set WPLANG to 'de' to enable German
	 * language support.
	 */
	'WPLANG' => 'en_US',

	/**
	 * For developers: WordPress debugging mode.
	 *
	 * Change this to true to enable the display of notices during development.
	 * It is strongly recommended that plugin and theme developers use WP_DEBUG
	 * in their development environments.
	 */
	'WP_DEBUG' => false,

	/**
	 * WordPress Database Table prefix.
	 *
	 * You can have multiple installations in one database if you give each a unique
	 * prefix. Only numbers, letters, and underscores please!
	 * Note: This is not the default "wp_" for security reasons.
	 */
	'table_prefix' => 'wp_',

	'DISALLOW_FILE_MODS' => true, // everything must be version-controlled

	/**
	 * Multisite constants
	 */
	// 'MULTISITE' => true,
	// 'SUBDOMAIN_INSTALL' => true,
	// 'base' => '/',
	// 'PATH_CURRENT_SITE' => '/',
	// 'SITE_ID_CURRENT_SITE' => 1,
	// 'BLOG_ID_CURRENT_SITE' => 1,
);
